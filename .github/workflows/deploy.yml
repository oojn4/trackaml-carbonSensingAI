name: Deploy TanStack Start to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.10'

      - name: Install dependencies
        run: bun install 

      - name: Build with TanStack Start
        run: |
          export NODE_ENV=production
          # Coba build untuk GitHub Pages
          bun run build:github || bun run build || {
            echo "All build methods failed, checking alternatives..."
            exit 1
          }

      - name: List build output (debug)
        run: |
          echo "Contents of root directory:"
          ls -la
          echo "Contents of .output:"
          ls -la .output/ || echo "No .output directory"
          echo "Contents of .output/public:"
          ls -la .output/public/ || echo "No .output/public directory"
          echo "Contents of dist:"
          ls -la dist/ || echo "No dist directory"
          echo "Contents of _build:"
          ls -la _build/ || echo "No _build directory"
          find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -20

      - name: Determine output directory and fix paths
        run: |
          # Tentukan directory output yang sebenarnya
          if [ -d ".output/public" ]; then
            OUTPUT_DIR=".output/public"
            echo "Using .output/public as output directory"
          elif [ -d ".output" ]; then
            OUTPUT_DIR=".output"
            echo "Using .output as output directory"
          elif [ -d "dist" ]; then
            OUTPUT_DIR="dist"
            echo "Using dist as output directory"
          else
            echo "No valid output directory found!"
            exit 1
          fi
          
          # Buat .nojekyll file di directory yang benar
          touch "${OUTPUT_DIR}/.nojekyll"
          echo "Created .nojekyll file in ${OUTPUT_DIR}"
          
          # Simpan output directory untuk step selanjutnya
          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.OUTPUT_DIR }}

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4